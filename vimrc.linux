"--------------------------------------------------
" Descriptor: vimrc including plugins for Linux 
" Author: Bill Liu
" Email: nonprivatemail@163.com
"--------------------------------------------------

"--------------------------------------------------
" vim-plug setting
"--------------------------------------------------
call plug#begin()

" Make sure you use single quotes

" Added nerdtree
Plug 'scrooloose/nerdtree'

let NERDTreeIgnore=['\.pyc$'] " ignore files in NERDTree
let NERDTreeWinPos='right'   " nerdtree locate at right side
let NERDTreeShowBookmarks = 1
" Open NERDTree with F2
map <F2> :NERDTreeToggle<cr>
" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Open a NERDTree automatically when vim starts up
"autocmd vimenter * NERDTree 
"autocmd vimenter * wincmd p  " focus main windows on launch

" Added LeaderF that is an efficient fuzzy finder
Plug 'Yggdroot/LeaderF'

let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<m-n>'
"noremap <c-n> :LeaderfMru<cr>
"noremap <m-p> :LeaderfFunction!<cr>
"noremap <m-n> :LeaderfBuffer<cr>
"noremap <m-m> :LeaderfTag<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}

" Added ack(You will need ack (>= 2.0)),a search tool as a replacement for grep
Plug 'mileszs/ack.vim'

" Highlight the keyword
let g:ackhighlight = 1

" Added gutentags(management of tags files)
" Required vim version >=8.0 and ctags
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'

set cscopetag
set cscopeprg='gtags-cscope'

" enable gtags module
let g:gutentags_modules = ['ctags', 'gtags_cscope']

" To know when Gutentags is generating tags
set statusline+=%{gutentags#statusline()}

let g:gutentags_project_root = ['.git']

" The suffix of tags data files
let g:gutentags_ctags_tagfile = '.tags'
" To avoid tags files to pollute your projects
let s:vim_tags = expand('~/.cache/vim_tags')
let g:gutentags_cache_dir = s:vim_tags
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" Universal ctags is required
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" Change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1

" Added autotag
Plug 'craigemery/vim-autotag'

let g:autotagTagsFile="tags"
" Added gitgutter, shows a git diff in the sign column
Plug 'airblade/vim-gitgutter'

" set the default value of updatetime to 100ms
set updatetime=100

" Added fugitive that is a git plugin
Plug 'tpope/vim-fugitive'

" Added YouCompleteMe
Plug 'ycm-core/YouCompleteMe'

" YCM's identifier completer will also collect identifiers from tags files
let g:ycm_collect_identifiers_from_tags_files=1

" controls the minimum number of characters that a completion candidate coming
let g:ycm_min_num_identifier_candidate_chars = 2

" YCM's identifier completer will seed its identifier database with
" the keywords of the programming language you're writing
let g:ycm_seed_identifiers_with_syntax=1

" controls for which Vim filetypes (see :h filetype) should YCM be turned on
let g:ycm_filetype_whitelist = {"c":1, "cpp":1, "sh":1, "python":1, "go":1}

let g:ycm_cache_omnifunc=0

let g:ycm_server_log_level = 'info'
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'

let g:ycm_show_diagnostics_ui = 0
let g:ycm_add_preview_to_completeopt = 0
set completeopt=menu,menuone

let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,go': ['re!\w{2}'],
			\ }

" Added Go language support for Vim
Plug 'fatih/vim-go'

" Added the asynrun to enable you to run shell commands in the background 
" and read the output in the quickfix window in realtime
Plug 'skywind3000/asyncrun.vim'
" TODO add configs to provid linting (syntax checking and semantic errors) 

" Added the Asynchronous Lint Engine
Plug 'dense-analysis/ale'

let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''

" Provide a handy way to preview
Plug 'skywind3000/vim-preview'

call plug#end()
filetype plugin indent on  " not to ignore plugin indent changes

" Brief help
" :PlugStatus      - Check the status of plugins
" :PlugInstall     - installs plugins; append `!` to update or :PlugUpdate
" :PlugClean       - confirms removal of unused plugins; append `!` to auto

"--------------------------------------------------
" General setting
"--------------------------------------------------
set nocompatible     " Use Vim defaults (much better!)
" To allow backspacing over everything in insert mode when compile vim
" manually
set backspace=indent,eol,start
set history=50       " keep 50 lines of command line history
set nu!              " dispaly the line numbers
set nowrap           " no auto new line 
set ruler            " show the cursor position all the time
set ignorecase
set smartcase
set autoread         " when the file is modified externally, the file is automatically updated
set nobackup
set noswapfile
set clipboard+=unnamed " the default register is shared with the system clipboard
set winaltkeys=no
set mouse=a          " enable mouse under any mode
set tags=tags;       " begin find tags file from working directory
set autochdir        " set current dir as working directory
set switchbuf+=usetab,newtab " open a new tab page before loading the buffer to switch to

" record last edit location
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"--------------------------------------------------
" Lang & Encoding setting
"--------------------------------------------------
set fileencodings=utf-8,gbk2312,gbk,gb18030,cp936  " encode supported
set fileencoding=utf-8  " current file encode
set encoding=utf-8      " vim internal file encode
set langmenu=zh_CN
let $LANG = 'en_US.UTF-8'

" avoid menu garbled under windows system
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

set fileformat=unix     " new file <EOL>

"--------------------------------------------------
" GUI setting
"--------------------------------------------------
colorscheme evening
set splitbelow       " the split window is located below
set splitright       " the split window is located to right
set guioptions-=T    " hide the toolbar
set guioptions-=m    " hide the menu bar
set guioptions-=L
set guioptions-=r
set guioptions-=b

set guioptions-=e    " use vim tab

set guifont=Courier\ New:h14  " font and size
au GUIEnter * simalt ~x " the window is automatically maximized when it starts up

" status line
set statusline=%F%m\ \ \ \ %{\"\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\"+\":\"\").\"\"}\ \ \ \ \ %l,%v\ %p%%
set laststatus=2     " show status line anyway

"--------------------------------------------------
" Find/replace setting 
"--------------------------------------------------
set hlsearch         " highlight search result
set incsearch        " Incremental search

"--------------------------------------------------
" Coding setting
"--------------------------------------------------
syntax enable        " syntax highlight
syntax on            " turn on file type detection
set autoindent       " always set autoindenting on
set expandtab        " use spaces instead of tabs
set shiftwidth=4     " 1 tab == 4 spaces
set tabstop=4
set showmatch        " show parentheses matching

" use the below highlight group when displaying bad whitespace is desired
highlight BadWhitespace ctermbg=red guibg=red

" it can mark whitespace issues
au BufRead,BufNewFile *.py,*.c,*.h match BadWhitespace /\s\+$/

" add the proper PEP 8 indentation
au BufNewFile,BufRead *.py
    \set tabstop=4
    \set softtabstop=4
    \set shiftwidth=4
    \set textwidth=79
    \set expandtab
    \set autoindent
    \set fileformat=unix

let mapleader = ","
" mapping key to edit vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" mapping key for quickfix
nnoremap <C-j> :cnext<CR>
nnoremap <C-k> :cprev<CR>
nnoremap  <leader>oq :<C-u>copen<CR>
nnoremap  <leader>cq :<C-u>cclose<CR>

" mapping key for ack
" -i case-insensitive, Ctrl+r" to paste from the register
nnoremap <Leader>a :Ack!<space>-i<space><C-r>"<CR>

" mapping key for gitgutter
nnoremap <leader>ggt :GitGutterToggle<CR>

" mapping key for gutentags
" disable the default keymaps
let g:gutentags_plus_nomap = 1
noremap <silent> <leader>gs :GscopeFind s <C-R><C-W><cr>
noremap <silent> <leader>gg :GscopeFind g <C-R><C-W><cr>
noremap <silent> <leader>gc :GscopeFind c <C-R><C-W><cr>
noremap <silent> <leader>gt :GscopeFind t <C-R><C-W><cr>
noremap <silent> <leader>ge :GscopeFind e <C-R><C-W><cr>
noremap <silent> <leader>gf :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
noremap <silent> <leader>gi :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
noremap <silent> <leader>gd :GscopeFind d <C-R><C-W><cr>
noremap <silent> <leader>ga :GscopeFind a <C-R><C-W><cr>
noremap <silent> <leader>gz :GscopeFind z <C-R><C-W><cr>

" mapping key for vim-preview
autocmd FileType qf nnoremap <silent><buffer> p :PreviewQuickfix<cr>
autocmd FileType qf nnoremap <silent><buffer> P :PreviewClose<cr>
execute "set <m-u>=u"
execute "set <m-j>=j"
noremap <m-u> :PreviewScroll -1<cr>
noremap <m-j> :PreviewScroll +1<cr>
inoremap <m-u> <c-\><c-o>:PreviewScroll -1<cr>
inoremap <m-j> <c-\><c-o>:PreviewScroll +1<cr>

" mapping key for Leaderf
noremap <leader>ff :LeaderfFunction<cr>
noremap <leader>fs :LeaderfTag<cr>
